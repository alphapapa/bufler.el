This is README.info, produced by makeinfo version 5.2 from README.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Sbuffer: (sbuffer).   Like Ibuffer, with flexible grouping in hierarchical sections.
END-INFO-DIR-ENTRY


File: README.info,  Node: Top,  Next: Screenshots,  Up: (dir)

sbuffer
*******

* Menu:

* Screenshots::
* Installation::
* Usage::
* Changelog::
* Credits::
* Development::
* License::

— The Detailed Node Listing —



Usage

* Bindings::
* Defining groups::



Changelog

* 0.1: 01. 

Sbuffer is like Ibuffer, but using magit-section
(https://github.com/magit/magit) to group buffers in a very flexible
way.


File: README.info,  Node: Screenshots,  Next: Installation,  Prev: Top,  Up: Top

1 Screenshots
*************

This screenshot shows group faces themed by prism
(https://github.com/alphapapa/prism.el), which Sbuffer optionally
supports.

   In the default Emacs theme:


File: README.info,  Node: Installation,  Next: Usage,  Prev: Screenshots,  Up: Top

2 Installation
**************

Use quelpa-use-package (https://github.com/quelpa/quelpa-use-package),
like this:

     (use-package sbuffer
       :quelpa (sbuffer :fetcher github :repo "alphapapa/sbuffer.el"))


File: README.info,  Node: Usage,  Next: Changelog,  Prev: Installation,  Up: Top

3 Usage
*******

Run the command sbuffer.  You can customize settings in the sbuffer
group.

* Menu:

* Bindings::
* Defining groups::


File: README.info,  Node: Bindings,  Next: Defining groups,  Up: Usage

3.1 Bindings
============

In the Sbuffer buffer, these keys are available (use C-h m to get the
most up-to-date listing).  They operate on all buffers in the section at
point.

   • 1 – 4 Cycle section levels at point.
   • M-1 – M-4 Cycle top-level sections.
   • g Refresh Sbuffer list.
   • RET Pop to buffer.
   • k Kill buffers.
   • s Save buffers.


File: README.info,  Node: Defining groups,  Prev: Bindings,  Up: Usage

3.2 Defining groups
===================

_See the sbuffer info page to view this information in Emacs._

   The Sbuffer groups definition is a list stored in variable
sbuffer-groups.  Each element of the list is either a lambda function
which takes a single argument, a buffer, or a list of such functions.
Each buffer is matched against these functions in order until it does
not match any more functions at that level.  A list of functions defines
a subgroup which short-circuits other groups at the same level,
preventing further grouping outside of the subgroup’s functions.
Ultimately, it’s lambdas all the way down.

   This seems somewhat difficult to explain, so please see the examples.
Once you get the hang of it, it’s powerful and flexible.

   For convenience, the macro sbuffer-defgroups provides a sort of DSL,
a concise vocabulary for defining groups.  For example, the default
groups are defined like this:

     (sbuffer-defgroups
       (group
        ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
        (group-or "*Help/Info*"
                  (mode-match "*Help*" (rx bos "help-"))
                  (mode-match "*Info*" (rx bos "info-"))))
       (group
        ;; Subgroup collecting all special buffers (i.e. ones that are not
        ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
        ;; through to other groups, so they end up grouped with their project buffers).
        (group-and "*Special*"
                   (lambda (buffer)
                     (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                          buffer)
                                 (funcall (auto-file) buffer))
                       "*Special*")))
        (group
         ;; Subgroup collecting these "special special" buffers
         ;; separately for convenience.
         (name-match "**Special**"
                     (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
        (group
         ;; Subgroup collecting all other Magit buffers, grouped by directory.
         (mode-match "*Magit* (non-status)" (rx bos (or "magit" "forge") "-"))
         (auto-directory))
        ;; Subgroup for Helm buffers.
        (mode-match "*Helm*" (rx bos "helm-"))
        ;; Remaining special buffers are grouped automatically by mode.
        (auto-mode))
       ;; All buffers under "~/.emacs.d" (or wherever it is).
       (dir user-emacs-directory)
       (group
        ;; Subgroup collecting buffers in `org-directory' (or "~/org" if
        ;; `org-directory' is not yet defined).
        (dir (if (bound-and-true-p org-directory)
                 org-directory
               "~/org"))
        (group
         ;; Subgroup collecting indirect Org buffers, grouping them by file.
         ;; This is very useful when used with `org-tree-to-indirect-buffer'.
         (auto-indirect)
         (auto-file))
        ;; Group remaining buffers by whether they're file backed, then by mode.
        (group-not "*special*" (auto-file))
        (auto-mode))
       (group
        ;; Subgroup collecting buffers in a version-control project,
        ;; grouping them by directory and then major mode.
        (auto-project) (auto-mode))
       ;; Group remaining buffers by directory, then major mode.
       (auto-directory)
       (auto-mode))

   *Note* that the macro does not _set_ the variable sbuffer-groups, it
merely expands a groups form, so you should use, e.g.  ‘(setf
sbuffer-groups (sbuffer-defgroups ...))’ to actually set the groups.

   The following group types are available in sbuffer-defgroups.  Note
that each one is expanded into a lambda, so they may also be called by
funcall (see example above).

‘Meta types’
     These types compose multiple of the other types into a single
     group.
        • ‘group (TYPE...)’ Define a subgroup matching given types,
          which short-circuits other groups at the same level.
        • ‘group-not (NAME TYPE)’ Groups buffers which do _not_ match
          the given type.
        • ‘group-and (NAME TYPE...)’ Groups buffers which match all of
          the given types.
        • ‘group-or (NAME TYPE...)’ Groups buffers which match any of
          the given types.
‘Auto-types’
     These types automatically create groups for the buffer’s attribute
     of this type.
        • ‘auto-directory’ Buffer’s directory.
        • ‘auto-file’ Buffer’s file name.
        • ‘auto-hidden’ Whether the buffer is hidden.
        • ‘auto-indirect’ Whether the buffer is indirect (e.g.  a cloned
          indirect buffer).
        • ‘auto-mode’ Buffer’s major mode.
        • ‘auto-project’ Buffer’s version-control project directory
          according to ‘project.el’.
        • ‘auto-special’ Whether the buffer is special (i.e.  whether
          its name starts with ‘*’).
        • ‘auto-tramp’ Whether the buffer is opened via Tramp.
‘Regexp types’
     These types match a value against a buffer’s attribute and group
     buffers which match.
        • ‘name-match (NAME REGEXP)’ Match a regular expression against
          the buffer’s name.
        • ‘mode-match (NAME REGEXP)’ Match a regular expression against
          the buffer’s major-mode.
‘Other types’
        • ‘dir (DIRS DEPTH)’ Groups buffers which match one of the given
          DIRS. DIRS may be one or a list of directory paths.  DEPTH may
          be nil or a depth above which to produce subdirectory groups
          (a feature probably broken at the moment).  See example above.


File: README.info,  Node: Changelog,  Next: Credits,  Prev: Usage,  Up: Top

4 Changelog
***********

* Menu:

* 0.1: 01. 


File: README.info,  Node: 01,  Up: Changelog

4.1 0.1
=======

First tagged release.


File: README.info,  Node: Credits,  Next: Development,  Prev: Changelog,  Up: Top

5 Credits
*********

   • Thanks to Jonas Bernoulli (https://github.com/tarsius) for
     magit-section
     (https://github.com/magit/magit/blob/master/lisp/magit-section.el).
   • Thanks to Magnar Sveen (https://github.com/magnars/dash.el) and
     Matus Goljer (https://github.com/Fuco1) for dash.el
     (https://github.com/magnars/dash.el).
   • Thanks to Johan Andersson (https://github.com/rejeep) for f.el
     (https://github.com/rejeep/f.el).


File: README.info,  Node: Development,  Next: License,  Prev: Credits,  Up: Top

6 Development
*************

Bug reports, feature requests, suggestions — _oh my_!


File: README.info,  Node: License,  Prev: Development,  Up: Top

7 License
*********

GPLv3



Tag Table:
Node: Top224
Node: Screenshots641
Node: Installation913
Node: Usage1211
Node: Bindings1431
Node: Defining groups1878
Node: Changelog7633
Node: 017759
Node: Credits7847
Node: Development8392
Node: License8561

End Tag Table


Local Variables:
coding: utf-8
End:
